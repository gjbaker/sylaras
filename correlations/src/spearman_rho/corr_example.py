# invoke required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import sys
import os
import matplotlib.pyplot as plt
import shelve
from scipy.stats import ttest_ind
from scipy.stats import spearmanr

# map matplotlib color codes to the default seaborn palette
sns.set()
sns.set_color_codes()
_ = plt.plot([0, 1], color='r')
sns.set_color_codes()
_ = plt.plot([0, 2], color='b')
sns.set_color_codes()
_ = plt.plot([0, 3], color='g')
sns.set_color_codes()
_ = plt.plot([0, 4], color='m')
sns.set_color_codes()
_ = plt.plot([0, 5], color='y')
plt.close('all')

# script call error message
if len(sys.argv) != 2:
    print('Usage: script.py <path_to_project>')
    sys.exit()

# project path for script call
project_path = sys.argv[1]

# project path error message
if not os.path.exists(project_path):
    print('Project path does not exist')
    sys.exit()

# define path variables
project_path = '/Users/gjbaker/projects/gbm_immunosuppression'

orthant_dir = os.path.join(
    project_path, 'postbot', 'data', 'logicle_e20', 'orthant')

pickle_dir = os.path.join(orthant_dir, 'pickled_global_vars')

for i in [('A', 'B'), ('B', 'B220T')]:

    if i[0] == 'A':

        # define example specific variables
        name = 'mock'
        condition = ('CTRL', 'EXP')
        np.random.seed(seed=5)
        percent_1 = np.array(np.random.random_sample(10)*100)
        percent_2 = np.array(np.random.random_sample(10)*100)
        percent_3 = np.array(np.random.random_sample(10)*100)
        percent_4 = np.array(np.random.random_sample(10)*100)
        A_ymax = 100
        B_ymax = 100

    else:

        # open dashboard shelve generated by orthant.py
        os.chdir(pickle_dir)
        with shelve.open('dashboard.shelve') as dashboard_shlf:

            B220T = dashboard_shlf['B220posCD8T']['spleen_rep_data']
            B = dashboard_shlf['B']['spleen_rep_data']

        # define example specific variables
        name = 'B220'
        condition = ('naive', 'gl261')
        percent_1 = B[-16:-8]
        percent_2 = B220T[-16:-8]
        percent_3 = B[-8:]
        percent_4 = B220T[-8:]
        A_ymax = 67
        B_ymax = 1.3

    # get dataframe
    A_CTRL = pd.DataFrame(
        {'condition': condition[0], 'cell type': i[0] + '_spleen',
         'percent': percent_1})

    B_CTRL_sort = A_CTRL.sort_values(by='percent', ascending=True)

    B_CTRL = pd.DataFrame(
        {'condition': condition[0], 'cell type': i[1] + '_spleen',
         'percent': percent_2}).sort_values(
                by='percent', ascending=False)
    B_CTRL.set_index(B_CTRL_sort.index, drop=True, inplace=True)

    A_EXP = pd.DataFrame(
        {'condition': condition[1], 'cell type': i[0] + '_spleen',
         'percent': percent_3})

    B_EXP = pd.DataFrame(
        {'condition': condition[1], 'cell type': i[1] + '_spleen',
         'percent': percent_4})

    data = pd.concat(
        [A_CTRL, B_CTRL, A_EXP, B_EXP], axis=0).reset_index()
    data.rename(columns={'index': 'replicate'}, inplace=True)

    # get stats
    A_CTRL_input = data[['replicate', 'percent']][
        (data['cell type'] == i[0] + '_spleen') &
        (data['condition'] == condition[0])].set_index(
        'replicate', drop=True)
    A_CTRL_input.rename(
        columns={
            'percent': i[0] + '_' + condition[0] + '_input'}, inplace=True)

    B_CTRL_input = data[['replicate', 'percent']][
        (data['cell type'] == i[1] + '_spleen') &
        (data['condition'] == condition[0])].set_index(
        'replicate', drop=True)
    B_CTRL_input.rename(
        columns={
            'percent': i[1] + '_' + condition[0] + '_input'}, inplace=True)

    A_EXP_input = data[['replicate', 'percent']][
        (data['cell type'] == i[0] + '_spleen') &
        (data['condition'] == condition[1])].set_index(
        'replicate', drop=True)
    A_EXP_input.rename(
        columns={
            'percent': i[0] + '_' + condition[1] + '_input'}, inplace=True)

    B_EXP_input = data[['replicate', 'percent']][
        (data['cell type'] == i[1] + '_spleen') &
        (data['condition'] == condition[1])].set_index(
        'replicate', drop=True)
    B_EXP_input.rename(
        columns={
            'percent': i[1] + '_' + condition[1] + '_input'}, inplace=True)

    A_stat = ttest_ind(
        A_CTRL_input, A_EXP_input, axis=0,
        equal_var=True, nan_policy='propagate')

    B_stat = ttest_ind(
        B_CTRL_input, B_EXP_input,
        axis=0, equal_var=True, nan_policy='propagate')

    # corr_matrix = pd.concat(
    #     [A_CTRL_input, B_CTRL_input,
    #      A_EXP_input, B_EXP_input], axis=1).corr(
    #         method='spearman', min_periods=1)
    values = pd.concat(
        [A_CTRL_input, B_CTRL_input,
         A_EXP_input, B_EXP_input], axis=1)

    rho, pval = spearmanr(values)

    corr_matrix = pd.DataFrame(
        data=rho, index=values.columns, columns=values.columns)

    m, n = corr_matrix.shape
    corr_matrix[:] = np.where(
        np.arange(m)[:, None] < np.arange(n), np.nan, corr_matrix)
    for s in range(len(corr_matrix)):
        corr_matrix.iloc[s, s] = np.nan

    corr_matrix = corr_matrix.unstack().dropna().reset_index().rename(
        columns={0: 'rho'})

    # get sort orders
    order1 = data[
        (data['cell type'] == i[0] + '_spleen') &
        (data['condition'] == condition[0])].sort_values(by='percent')
    order1 = order1['replicate'].tolist()

    order2 = data[
        (data['cell type'] == i[0] + '_spleen') &
        (data['condition'] == condition[1])].sort_values(by='percent')
    order2 = order2['replicate'].tolist()

    # plot bar graphs
    sns.set(font_scale=0.85)
    sns.set_style('whitegrid')
    h = sns.FacetGrid(
        data, row='condition', col='cell type',
        sharex=False, sharey=False, hue='condition', palette=['b', 'g'],
        gridspec_kws={'wspace': 0.3, 'hspace': 0.3})
    h.map(
        sns.barplot, 'replicate', 'percent', order=[0, 1, 2, 3, 4, 5, 6, 7])
    axes = h.axes
    axes[0, 0].set_ylim(0, A_ymax)
    axes[0, 1].set_ylim(0, B_ymax)
    axes[1, 0].set_ylim(0, A_ymax)
    axes[1, 1].set_ylim(0, B_ymax)
    plt.tight_layout()
    h.savefig(os.path.join('/Users/gjbaker/Desktop',
              name + '_numerical_order' + '.pdf'))
    plt.close('all')

    g = sns.FacetGrid(
        data, row='condition', col='cell type',
        sharex=False, sharey=False, hue='condition', palette=['b', 'g'],
        gridspec_kws={'wspace': 0.3, 'hspace': 0.3})
    g.map(sns.barplot, 'replicate', 'percent', order=order1)
    axes = g.axes
    axes[0, 0].set_ylim(0, A_ymax)
    axes[0, 1].set_ylim(0, B_ymax)
    axes[1, 0].set_ylim(0, A_ymax)
    axes[1, 1].set_ylim(0, B_ymax)
    plt.tight_layout()
    g.savefig(os.path.join('/Users/gjbaker/Desktop',
              name + '_' + condition[0] + '_sort' + '.pdf'))
    plt.close('all')

    g = sns.FacetGrid(
        data, row='condition', col='cell type',
        sharex=False, sharey=False, hue='condition', palette=['b', 'g'],
        gridspec_kws={'wspace': 0.3, 'hspace': 0.3})
    g.map(sns.barplot, 'replicate', 'percent', order=order2)
    axes = g.axes
    axes[0, 0].set_ylim(0, A_ymax)
    axes[0, 1].set_ylim(0, B_ymax)
    axes[1, 0].set_ylim(0, A_ymax)
    axes[1, 1].set_ylim(0, B_ymax)
    plt.tight_layout()
    g.savefig(os.path.join('/Users/gjbaker/Desktop',
              name + '_' + condition[1] + '_sort' '.pdf'))
    plt.close('all')

    # print stats
    print()
    print(condition[0] + '_stat: ' + str(A_stat))
    print(condition[1] + '_stat: ' + str(B_stat))
    print()
    print(corr_matrix)
